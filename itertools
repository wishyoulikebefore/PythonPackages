itertools - Functional tools for creating and using iterators.

Infinite iterators:
count(start=0, step=1) --> start, start+step, start+2*step, ...
#count(10) --> 10 11 12 13 14 ...

cycle(p) --> p0, p1, ... plast, p0, p1, ...
#cycle('ABCD') --> A B C D A B C D ...

repeat(elem [,n]) --> elem, elem, elem, ... endlessly or up to n times
#repeat(10, 3) --> 10 10 10
    
accumulate(p[, func]) --> p0, p0+p1, p0+p1+p2
#accumulate([1,2,3,4,5]) --> 1 3 6 10 15

chain(p, q, ...) --> p0, p1, ... plast, q0, q1, ... 
#chain('ABC', 'DEF') --> A B C D E F

chain.from_iterable([p, q, ...]) --> p0, p1, ... plast, q0, q1, ... 

groupby(iterable[, keyfunc]) --> 通过某个字段将记录分组
#groupby函数扫描整个序列并且查找连续相同值，因此要先排序
rows = [
    {'address': '5412 N CLARK', 'date': '07/01/2012'},
    {'address': '5148 N CLARK', 'date': '07/04/2012'},
    {'address': '5800 E 58TH', 'date': '07/02/2012'},
    {'address': '2122 N CLARK', 'date': '07/03/2012'},
    {'address': '5645 N RAVENSWOOD', 'date': '07/02/2012'},
    {'address': '1060 W ADDISON', 'date': '07/02/2012'},
    {'address': '4801 N BROADWAY', 'date': '07/01/2012'},
    {'address': '1039 W GRANVILLE', 'date': '07/04/2012'},
]
from operator import itemgetter
from itertools import groupby

rows.sort(key=itemgetter('date'))
for date, items in groupby(rows, key=itemgetter('date')):
    print(date)
    for i in items:
        print(' ', i)

filterfalse(pred, seq) --> elements of seq where pred(elem) is False
#filterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8

islice(seq, [start,] stop [, step]) --> elements from seq[start:stop:step]
#islice('ABCDEFG', 2, None) --> C D E F G

takewhile(pred, seq) --> seq[0], seq[1], until pred fails
#takewhile(lambda x: x<5, [1,4,6,4,1]) --> 1 4

zip_longest(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... 
#zip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-
   
product(p, q, ... [repeat=1]) --> cartesian product
#product('ABCD', repeat=2)
结果：AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD

permutations(p[, r]): r-length tuples, all possible orderings, no repeated elements
#permutations('ABCD', 2)    排列
AB AC AD BA BC BD CA CB CD DA DB DC
    
combinations(p, r): r-length tuples, in sorted order, no repeated elements
#combinations('ABCD', 2) 组合
AB AC AD BC BD CD

combinations_with_replacement(p, r) : r-length tuples, in sorted order, with repeated elements
#combinations_with_replacement('ABCD', 2)
AA AB AC AD BB BC BD CC CD DD

