# Created by zty on 2019/1/28
import pandas as pd
import numpy as np
import os
import argparse

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-wd",help="word directory")
    parser.add_argument("-f",help="RNAseq")
    args = parser.parse_args()
    return args.wd, args.f

def normalize_rnaseq(rnaseq):
    select_df = rnaseq.ix[rnaseq.any(axis=1)]
    samples = rnaseq.columns
    f75 = rnaseq.apply(lambda x: np.percentile(x, 75))
    ref_column = np.argmin(abs(f75 - np.mean(f75)))
    normalized_factorDict = []
    for sample in samples:
        if sample == ref_column:
            normalized_factorDict.append(1)
        else:
            normalized_factorDict.append(cal_normalize_factor(select_df,sample,ref_column))
    normalized_df = select_df * normalized_factorDict
    normalized_df.to_csv("normalized_rnaseq.csv")

def cal_normalize_factor(df, obs, ref, logratioTrim=0.3, sumTrim=0.05, cutoff=-1e10, weight=True):
    df = df[[obs,ref]]
    nO = df[obs].sum()
    nR = df[ref].sum()
    df["M"] = np.log2((df[obs] / nO) / (df[ref] / nR))
    df["A"] = (np.log2(df[obs] / nO) + np.log2(df[ref] / nR)) / 2
    df["var"] = (nO - df[obs]) / nO / df[obs] + (nR - df[ref]) / nR / df[ref]
    filter_df = df.ix[(df["M"] != np.inf) & (df["M"] != -np.inf) & (df["M"] != np.nan) &
                      (df["A"] != -np.inf) & (df["A"] > cutoff)]
    if filter_df["M"].abs().max() < 1e-6:
        print("%s数据有问题" %(obs))
        return
    # TMM normalization
    filter_genes_num = len(filter_df)
    low_L = np.floor(filter_genes_num * logratioTrim)
    high_L = filter_genes_num - low_L
    low_A = np.floor(filter_genes_num * sumTrim)
    high_A = filter_genes_num - low_A
    sort_M = filter_df["M"].sort_values(ascending=True).tolist()
    sort_A = filter_df["A"].sort_values(ascending=True).tolist()
    low_L_value, high_L_value = sort_M[int(low_L)], sort_M[int(high_L)]
    low_A_value, high_A_value = sort_A[int(low_A)], sort_A[int(high_A)]
    keep_df = filter_df.ix[(low_L_value <= filter_df["M"]) & (filter_df["M"] <= high_L_value) &
                           (low_A_value <= filter_df["A"]) & (filter_df["A"] <= high_A_value)]
    if weight:
        normalize_factor = np.sum(keep_df["M"] / keep_df["var"]) / np.sum(1 / keep_df["var"])
    else:
        normalize_factor = keep_df["M"].mean()
    return 2 ** normalize_factor

if __name__ == "__main__":
    wd,_file = parse_args()
    os.chdir(wd)
    rnaseq = pd.read_csv(_file,index_col=0)
    normalize_rnaseq(rnaseq)
