groupby技术
 

In [172]: df = DataFrame({"key1":["a","a","b","b","a"],"key2":["one","two","one","two","one"],
...:                	    "data1":np.random.randn(5),"data2":np.random.randn(5)})
In [176]: means = df["data1"].groupby([df["key1"],df["key2"]]).mean()
等同于
In [181]: means = df.groupby(["key1","key2"])["data1"].mean()
In [177]: means
Out[177]: 
key1  key2
a     one     0.868589
      two     0.308173
b     one    -0.599301
two     0.850721

层次化索引
In [183]: means.unstack()
Out[183]: 
key2       one       two
key1                    
a     0.868589  0.308173
b    -0.599301  0.850721

对分组进行迭代
In [186]: for (k1,k2),group in df.groupby(["key1","key2"]):
     ...:     print(k1,k2)
     ...:     print(group)

a one
      data1     data2 key1 key2
0  1.231969  1.737238    a  one
4  0.505210  0.273627    a  one
a two
      data1     data2 key1 key2
1  0.308173  1.300424    a  two
……………………

agg:对分组数据进行多种运算
grouped.agg([np.mean,np.std,np.sum])
Out[18]: 
         data1                         data2                    
          mean       std       sum      mean       std       sum
key1                                                            
a    -0.885367  0.359726 -2.656102  0.149395  0.230247  0.448185
b    -0.571750  0.339512 -1.143500 -0.473918  0.073034 -0.947836

In [199]: tips = pd.read_csv("/Users/zty/Downloads/rawdata/ch08/tips.csv")
In [200]: tips["tip_pct"] = tips["tip"]/tips["total_bill"]
In [201]: tips[:5]
Out[201]: 
   total_bill   tip     sex smoker  day    time  size   tip_pct
0       16.99  1.01  Female     No  Sun  Dinner     2  0.059447
1       10.34  1.66    Male     No  Sun  Dinner     3  0.160542
2       21.01  3.50    Male     No  Sun  Dinner     3  0.166587
3       23.68  3.31    Male     No  Sun  Dinner     2  0.139780
4       24.59  3.61  Female     No  Sun  Dinner     4  0.146808

In [202]: grouped = tips.groupby(["sex","smoker"])
In [203]: grouped = tips.groupby(["sex","smoker"])["tip_pct"]
In [204]: grouped.agg({"foo":np.mean,"bar":np.std })    #定制标题
Out[204]: 
                    foo       bar
sex    smoker                    
Female No      0.156921  0.036421
       Yes     0.182150  0.071595
Male   No      0.160669  0.041849
Yes     0.152771  0.090588

#以无索引形式返回聚合数据
In [206]: tips.groupby(["sex","smoker"],as_index=False).mean()
Out[206]: 
      sex smoker  total_bill       tip      size   tip_pct
0  Female     No   18.105185  2.773519  2.592593  0.156921
1  Female    Yes   17.977879  2.931515  2.242424  0.182150
2    Male     No   19.791237  3.113402  2.711340  0.160669
3    Male    Yes   22.284500  3.051167  2.500000  0.152771

apply()：沿着DataFrame某行或某列应用函数（配合lambda使用）
df.apply(lambda x:x!=x[0],axis=1)
applymap()：对DataFrame每个元素进行函数应用
df[[“销售”,”人员数量”]].applymap(lambda x:”%.2f” %x)
map()：对Series每个元素进行函数应用
df[“销售”].map(lambda x:”%.2f” %x)

分位数和桶分析
cut(x, bins, right=True, labels=None)：得到长度相等的区间
qcut(x, q, labels=None)：得到数据点相等的区间

用特定于分组的值填充缺失值
In [218]: states = ["Ohio","New York","Vermont","Florida","Oregon","Nevada","California","Idaho"]
In [219]: group_key=["East"]*4+["West"]*4
In [220]: data = Series(np.random.randn(8),index=states)
In [221]: data[["Vermont","Nevada","Idaho"]] = np.nan
In [223]: fill_values = {"East":0.5,"West":-1}
In [224]: fill_func = lambda g: g.fillna(fill_values[g.name])     #分组具有一个name属性
In [225]: data.groupby(group_key).apply(fill_func)
Out[225]: 
Ohio         -1.056641
New York      0.497320
Vermont       0.500000
Florida      -0.602359
Oregon       -1.442974
Nevada       -1.000000
California    1.167836
Idaho        -1.000000
