function:
    beta: beta(a, b, size=None)   
    binomial: binomial(n, p, size=None)   
    chisquare: chisquare(df, size=None)
    choice: choice(a, size=None, replace=True, p=None)
    dirichlet: dirichlet(alpha, size=None)
    exponential: exponential(scale=1.0, size=None)
    gamma: gamma(shape, scale=1.0, size=None)
    geometric: geometric(p, size=None)
    hypergeometric: hypergeometric(ngood, nbad, nsample, size=None)
    logistic: logistic(loc=0.0, scale=1.0, size=None)
    lognormal: lognormal(mean=0.0, sigma=1.0, size=None)
    multivariate_normal: multivariate_normal(mean, cov[, size])
    negative_binomial: negative_binomial(n, p, size=None)
    noncentral_chisquare: noncentral_chisquare(df, nonc, size=None)
    normal: normal(mu,sigma,size)   #产生正太分布的样本值
    permutation: permutation(x)     #随机变更序列顺序，而非按顺序
    poisson: poisson(lam=1.0, size=None)
    power: power(a, size=None)
    rand: rand(d0, d1, ..., dn)
    randint: randint(low, high=None, size=None, dtype='l')
    randn: randn(d0, d1, ..., dn)   #产生标准正太分布的样本值(d0,d1等为维度)
    random: random_sample(size=None)  #产生[0.0, 1.0]之间的随机数
    ranf: random_sample(size=None)
    seed: seed(seed=None)
    standard_cauchy: standard_cauchy(size=None)
    standard_exponential: standard_exponential(size=None)
    standard_gamma: standard_gamma(shape, size=None)
    standard_normal: standard_normal(size=None)
    standard_t: standard_t(df, size=None)
    uniform: uniform(low=0.0, high=1.0, size=None)
    vonmises: vonmises(mu, kappa, size=None)


    









choice(a, size=None, replace=True, p=None)
        Generates a random sample from a given 1-D array
        a : 1-D array-like or int
            If an ndarray, a random sample is generated from its elements.
            If an int, the random sample is generated as if a was np.arange(n)
        size : Output shape.  If the given shape is, e.g., ``(m, n, k)``, then
            ``m * n * k`` samples are drawn.  Default is None
        replace : boolean, Whether the sample is with or without replacement
        p : 1-D array-like, The probabilities associated with each entry in a.
            If not given the sample assumes a uniform distribution over all
            entries in a.
>>> np.random.choice(10,size=[5,])
array([2, 8, 7, 9, 6])
>>> np.random.choice(10,size=[5,2])
array([[2, 2],
       [5, 3],
       [8, 8],
       [5, 8],
       [1, 0]])

>>> np.random.randint(5,10,size=[5,])
array([7, 7, 7, 5, 7])

>>> np.random.random_sample(size=[10,])
array([ 0.9683823 ,  0.58915291,  0.80798635,  0.25803534,  0.69806361,
        0.47833174,  0.88196896,  0.54083119,  0.14953307,  0.97063944])
>>> np.random.random_sample(size=[10,2])
array([[ 0.63686374,  0.41030617],
       [ 0.24232008,  0.74838598],
       [ 0.13794338,  0.42965701],
       [ 0.08813101,  0.53260156],
       [ 0.63456667,  0.70021624],
       [ 0.45550033,  0.5709665 ],
       [ 0.10788797,  0.70948747],
       [ 0.84078571,  0.52104846],
       [ 0.27182194,  0.79397319],
       [ 0.63878479,  0.32071163]])

>>> np.random.randn(10)
array([-0.77463635,  0.3474603 ,  0.10175216,  0.64420216, -1.27908879,
        1.21266198, -2.00829794,  0.01101528, -0.73112559, -1.07337041])
